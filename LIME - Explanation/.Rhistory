install.packages('lime')
install.packages('MASS')
install.packages("randomForest")
install.packages('caret')
install.packages('e1071')
library(lime)
library(MASS)
library(randomForest)
library(caret)
library(e1071)
data(biopsy)
force(biopsy)
data(biopsy)
biopsy$ID <- NULL
names(biopsy) <- c('clump thickness', 'uniformity cell size',
'uniformity cell shape', 'marginal adhesion','single epithelial cell size',
'bare nuclei', 'bland chromatin', 'normal nucleoli', 'mitoses','class')
sum(is.na(biopsy))
biopsy <- na.omit(biopsy)
sum(is.na(biopsy))
head(biopsy, 5)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(biopsy))
## set the seed to make your partition reproducible - similar to random state in Python
set.seed(123)
train_ind <- sample(seq_len(nrow(biopsy)), size = smp_size)
train_biopsy <- biopsy[train_ind, ]
test_biopsy <- biopsy[-train_ind, ]
cat(dim(train_biopsy), dim(test_biopsy))
model_rf <- caret::train(class ~ ., data = train_biopsy,method = "rf", #random forest
trControl = trainControl(method = "repeatedcv", number = 10,repeats = 5, verboseIter = FALSE))
model_rf
biopsy_rf_pred <- predict(model_rf, test_biopsy)
confusionMatrix(biopsy_rf_pred, as.factor(test_biopsy$class))
explainer <- lime(train_biopsy, model_rf)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 5)
explanation <- explain(test_biopsy[93, ], explainer, n_labels = 1, n_features = 10)
plot_features(explanation)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 5)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 5)
explainer <- lime(train_biopsy, model_rf)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 5)
explainer <- lime(train_biopsy, model_rf)
explanation <- explain(test_biopsy[20:25, ], explainer, n_labels = 1, n_features = 5)
explainer <- lime(train_biopsy, model_rf)
explanation <- explain(test_biopsy[20:25, ], explainer, n_labels = 2, n_features = 5)
explainer <- lime(train_biopsy, model_rf)
explanation <- explain(test_biopsy[20:25, ], explainer, n_labels = 2, n_features = 3)
explainer <- lime(train_biopsy, model_rf)
explanation <- explain(test_biopsy[20:25, ], explainer, n_labels = 2, n_features = 1)
explainer <- lime(train_biopsy, model_rf)
explanation <- explain(test_biopsy[20:25, ], explainer, n_labels = 2, n_features = 5)
explainer <- lime(train_biopsy, model_rf)
explanation <- explain(test_biopsy[20:25, ], explainer, n_labels = 2, n_features = 10)
data(biopsy)
biopsy$ID <- NULL
names(biopsy) <- c('ESPESSURA DO AGLOMERADO', 'TAMANHO DA CÉLULA DE UNIFORMIDADE',
'FORMATO DA CÉLULA DE UNIFORMIDADE', 'ADESÃO MARGINAL','TAMANHO DA CÉLULA EPITELIAL ÚNICA',
'NÚCLEO NU', 'CROMATINA BRANDA', 'NUCLÉOLO NORMAL', 'MITOSES','CLASSE')
sum(is.na(biopsy))
biopsy <- na.omit(biopsy)
sum(is.na(biopsy))
head(biopsy, 5)
data(biopsy)
biopsy$ID <- NULL
names(biopsy) <- c('ESPESSURA DO AGLOMERADO', 'TAMANHO DA CÉLULA DE UNIFORMIDADE',
'FORMATO DA CÉLULA DE UNIFORMIDADE', 'ADESÃO MARGINAL','TAMANHO DA CÉLULA EPITELIAL ÚNICA',
'NÚCLEO NU', 'CROMATINA BRANDA', 'NUCLÉOLO NORMAL', 'MITOSES','CLASSE')
sum(is.na(biopsy))
biopsy <- na.omit(biopsy)
sum(is.na(biopsy))
head(biopsy, 10)
View(biopsy)
dim(test_biopsy)
dim(train_biopsy)
dim(test_biopsy)
## 75% do tamanho da amostra
smp_size <- floor(0.75 * nrow(biopsy))
## Definir a semente para tornar sua partição reproduzível
set.seed(123)
train_ind <- sample(seq_len(nrow(biopsy)), size = smp_size)
train_biopsy <- biopsy[train_ind, ]
test_biopsy <- biopsy[-train_ind, ]
model_rf <- caret::train(class ~ ., data = train_biopsy, method = "rf", #random forest
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 5, verboseIter = FALSE))
model_rf <- caret::train(class ~ ., data = train_biopsy, method = "rf", #random forest
trControl = trainControl(method = "repeatedcv", number = 10,repeats = 5, verboseIter = FALSE))
install.packages('lime')
install.packages('MASS')
install.packages("randomForest")
install.packages('caret')
install.packages('e1071')
library(lime)
library(MASS)
library(randomForest)
library(caret)
library(e1071)
library(lime)
library(MASS)
library(randomForest)
library(caret)
library(e1071)
data(biopsy)
biopsy$ID <- NULL
names(biopsy) <- c('ESPESSURA DO AGLOMERADO', 'TAMANHO DA CÉLULA DE UNIFORMIDADE',
'FORMATO DA CÉLULA DE UNIFORMIDADE', 'ADESÃO MARGINAL','TAMANHO DA CÉLULA EPITELIAL ÚNICA',
'NÚCLEO NU', 'CROMATINA BRANDA', 'NUCLÉOLO NORMAL', 'MITOSES','CLASSE')
sum(is.na(biopsy))
biopsy <- na.omit(biopsy)
sum(is.na(biopsy))
head(biopsy, 10)
## 75% do tamanho da amostra
smp_size <- floor(0.75 * nrow(biopsy))
## Definir a semente para tornar sua partição reproduzível
set.seed(123)
train_ind <- sample(seq_len(nrow(biopsy)), size = smp_size)
train_biopsy <- biopsy[train_ind, ]
test_biopsy <- biopsy[-train_ind, ]
dim(train_biopsy)
dim(test_biopsy)
model_rf <- caret::train(class ~ ., data = train_biopsy, method = "rf", #random forest
trControl = trainControl(method = "repeatedcv", number = 10,repeats = 5, verboseIter = FALSE))
model_rf <- caret::train(class ~ ., data = train_biopsy,method = "rf", #random forest
trControl = trainControl(method = "repeatedcv", number = 10,repeats = 5, verboseIter = FALSE))
model_rf <- caret::train(class ~ ., data = train_biopsy,method = "rf", #random forest
trControl = trainControl(method = "repeatedcv", number = 10,repeats = 5, verboseIter = FALSE))
data(biopsy)
biopsy$ID <- NULL
#names(biopsy) <- c('ESPESSURA DO AGLOMERADO', 'TAMANHO DA CÉLULA DE UNIFORMIDADE',
#'FORMATO DA CÉLULA DE UNIFORMIDADE', 'ADESÃO MARGINAL','TAMANHO DA CÉLULA EPITELIAL ÚNICA',
#'NÚCLEO NU', 'CROMATINA BRANDA', 'NUCLÉOLO NORMAL', 'MITOSES','CLASSE')
names(biopsy) <- c('clump thickness', 'uniformity cell size',
'uniformity cell shape', 'marginal adhesion','single epithelial cell size',
'bare nuclei', 'bland chromatin', 'normal nucleoli', 'mitoses','class')
sum(is.na(biopsy))
biopsy <- na.omit(biopsy)
sum(is.na(biopsy))
head(biopsy, 10)
## 75% do tamanho da amostra
smp_size <- floor(0.75 * nrow(biopsy))
## Definir a semente para tornar sua partição reproduzível
set.seed(123)
train_ind <- sample(seq_len(nrow(biopsy)), size = smp_size)
train_biopsy <- biopsy[train_ind, ]
test_biopsy <- biopsy[-train_ind, ]
dim(train_biopsy)
dim(test_biopsy)
model_rf <- caret::train(class ~ ., data = train_biopsy,method = "rf", #random forest
trControl = trainControl(method = "repeatedcv", number = 10,repeats = 5, verboseIter = FALSE))
data(biopsy)
biopsy$ID <- NULL
#names(biopsy) <- c('ESPESSURA DO AGLOMERADO', 'TAMANHO DA CÉLULA DE UNIFORMIDADE',
#'FORMATO DA CÉLULA DE UNIFORMIDADE', 'ADESÃO MARGINAL','TAMANHO DA CÉLULA EPITELIAL ÚNICA',
#'NÚCLEO NU', 'CROMATINA BRANDA', 'NUCLÉOLO NORMAL', 'MITOSES','CLASSE')
names(biopsy) <- c('ESPESSURA DO AGLOMERADO', 'TAMANHO DA CÉLULA DE UNIFORMIDADE',
'FORMATO DA CÉLULA DE UNIFORMIDADE', 'ADESÃO MARGINAL','TAMANHO DA CÉLULA EPITELIAL ÚNICA',
'NÚCLEO NU', 'CROMATINA BRANDA', 'NUCLÉOLO NORMAL', 'MITOSES','class')
sum(is.na(biopsy))
biopsy <- na.omit(biopsy)
sum(is.na(biopsy))
head(biopsy, 10)
## 75% do tamanho da amostra
smp_size <- floor(0.75 * nrow(biopsy))
## Definir a semente para tornar sua partição reproduzível
set.seed(123)
train_ind <- sample(seq_len(nrow(biopsy)), size = smp_size)
train_biopsy <- biopsy[train_ind, ]
test_biopsy <- biopsy[-train_ind, ]
dim(train_biopsy)
dim(test_biopsy)
model_rf <- caret::train(class ~ ., data = train_biopsy,method = "rf", #random forest
trControl = trainControl(method = "repeatedcv", number = 10,repeats = 5, verboseIter = FALSE))
model_rf
biopsy_rf_pred <- predict(model_rf, test_biopsy)
confusionMatrix(biopsy_rf_pred, as.factor(test_biopsy$class))
explainer <- lime(train_biopsy, model_rf)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 5)
explanation <- explain(test_biopsy[93, ], explainer, n_labels = 1, n_features = 10)
plot_features(explanation)
explanation <- explain(test_biopsy[94, ], explainer, n_labels = 1, n_features = 10)
plot_features(explanation)
explanation <- explain(test_biopsy[24, ], explainer, n_labels = 1, n_features = 10)
plot_features(explanation)
explainer <- lime(train_biopsy, model_rf)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 5)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 5)
plot_features(explanation)
explanation <- explain(test_biopsy[24, ], explainer, n_labels = 1, n_features = 10)
plot_features(explanation)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, ncol = 5, n_features = 5)
plot_features(explanation)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 5)
plot_features(explanation, ncol = 5)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 5)
plot_features(explanation, ncol = 5, cases = NULL)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 5)
plot_features(explanation, ncol = 1)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 5)
#plot_features(explanation, ncol = 1)
plot_text_explanations(explanation)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 5)
#plot_features(explanation, ncol = 1)
plot_explanations(explanation)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 15)
#plot_features(explanation, ncol = 1)
plot_explanations(explanation)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 5)
#plot_features(explanation, ncol = 1)
plot_explanations(explanation)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 10)
#plot_features(explanation, ncol = 1)
plot_explanations(explanation)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 1, n_features = 5)
#plot_features(explanation, ncol = 1)
plot_explanations(explanation)
explanation <- explain(test_biopsy[93, ], explainer, n_labels = 1, n_features = 10)
plot_features(explanation)
explainer <- lime(train_biopsy, model_rf)
explanation <- explain(test_biopsy[20:25, ], explainer, n_labels = 2, n_features = 10)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 2, n_features = 5)
#plot_features(explanation, ncol = 1)
plot_explanations(explanation)
install.packages('lime')
install.packages('MASS')
install.packages("randomForest")
install.packages('caret')
install.packages('e1071')
library(lime)
library(MASS)
library(randomForest)
library(caret)
library(e1071)
library(lime)
library(MASS)
library(randomForest)
library(caret)
library(e1071)
data(biopsy)
biopsy$ID <- NULL
#names(biopsy) <- c('ESPESSURA DO AGLOMERADO', 'TAMANHO DA CÉLULA DE UNIFORMIDADE',
#'FORMATO DA CÉLULA DE UNIFORMIDADE', 'ADESÃO MARGINAL','TAMANHO DA CÉLULA EPITELIAL ÚNICA',
#'NÚCLEO NU', 'CROMATINA BRANDA', 'NUCLÉOLO NORMAL', 'MITOSES','CLASSE')
names(biopsy) <- c('ESPESSURA DO AGLOMERADO', 'TAMANHO DA CÉLULA DE UNIFORMIDADE',
'FORMATO DA CÉLULA DE UNIFORMIDADE', 'ADESÃO MARGINAL','TAMANHO DA CÉLULA EPITELIAL ÚNICA',
'NÚCLEO NU', 'CROMATINA BRANDA', 'NUCLÉOLO NORMAL', 'MITOSES','class')
sum(is.na(biopsy))
biopsy <- na.omit(biopsy)
sum(is.na(biopsy))
head(biopsy, 10)
## 75% do tamanho da amostra
smp_size <- floor(0.75 * nrow(biopsy))
## Definir a semente para tornar sua partição reproduzível
set.seed(123)
train_ind <- sample(seq_len(nrow(biopsy)), size = smp_size)
train_biopsy <- biopsy[train_ind, ]
test_biopsy <- biopsy[-train_ind, ]
dim(train_biopsy)
dim(test_biopsy)
model_rf <- caret::train(class ~ ., data = train_biopsy,method = "rf", #random forest
trControl = trainControl(method = "repeatedcv", number = 10,repeats = 5, verboseIter = FALSE))
#number: Either the number of folds or number of resampling iterations
#repeats: For repeated k-fold cross-validation only: the number of complete sets of folds to compute
#verboseIter: A logical for printing a training log.
model_rf
biopsy_rf_pred <- predict(model_rf, test_biopsy)
confusionMatrix(biopsy_rf_pred, as.factor(test_biopsy$class))
explainer <- lime(train_biopsy, model_rf)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 2, n_features = 5)
#plot_features(explanation, ncol = 1)
plot_explanations(explanation)
explanation <- explain(test_biopsy[93, ], explainer, n_labels = 1, n_features = 10)
plot_features(explanation)
View(biopsy)
View(biopsy)
View(biopsy)
View(explainer)
View(explanation)
View(test_biopsy)
install.packages('lime')
install.packages('MASS')
install.packages("randomForest")
install.packages('caret')
install.packages('e1071')
library(lime)
library(MASS)
library(randomForest)
library(caret)
library(e1071)
data(biopsy)
biopsy$ID <- NULL
#names(biopsy) <- c('ESPESSURA DO AGLOMERADO', 'TAMANHO DA CÉLULA DE UNIFORMIDADE',
#'FORMATO DA CÉLULA DE UNIFORMIDADE', 'ADESÃO MARGINAL','TAMANHO DA CÉLULA EPITELIAL ÚNICA',
#'NÚCLEO NU', 'CROMATINA BRANDA', 'NUCLÉOLO NORMAL', 'MITOSES','CLASSE')
names(biopsy) <- c('ESPESSURA DO AGLOMERADO', 'TAMANHO DA CÉLULA DE UNIFORMIDADE',
'FORMATO DA CÉLULA DE UNIFORMIDADE', 'ADESÃO MARGINAL','TAMANHO DA CÉLULA EPITELIAL ÚNICA',
'NÚCLEO NU', 'CROMATINA BRANDA', 'NUCLÉOLO NORMAL', 'MITOSES','class')
sum(is.na(biopsy))
biopsy <- na.omit(biopsy)
sum(is.na(biopsy))
head(biopsy, 10)
## 75% do tamanho da amostra
smp_size <- floor(0.75 * nrow(biopsy))
## Definir a semente para tornar sua partição reproduzível
set.seed(123)
train_ind <- sample(seq_len(nrow(biopsy)), size = smp_size)
train_biopsy <- biopsy[train_ind, ]
test_biopsy <- biopsy[-train_ind, ]
dim(train_biopsy)
dim(test_biopsy)
model_rf <- caret::train(class ~ ., data = train_biopsy,method = "rf", #random forest
trControl = trainControl(method = "repeatedcv", number = 10,repeats = 5, verboseIter = FALSE))
#number: Either the number of folds or number of resampling iterations
#repeats: For repeated k-fold cross-validation only: the number of complete sets of folds to compute
#verboseIter: A logical for printing a training log.
model_rf <- caret::train(class ~ ., data = train_biopsy,method = "rf", #random forest
trControl = trainControl(method = "repeatedcv", number = 10,repeats = 5, verboseIter = FALSE))
#number: Either the number of folds or number of resampling iterations
#repeats: For repeated k-fold cross-validation only: the number of complete sets of folds to compute
#verboseIter: A logical for printing a training log.
model_rf
biopsy_rf_pred <- predict(model_rf, test_biopsy)
confusionMatrix(biopsy_rf_pred, as.factor(test_biopsy$class))
explainer <- lime(train_biopsy, model_rf)
explanation <- explain(test_biopsy[15:20, ], explainer, n_labels = 2, n_features = 5)
#plot_features(explanation, ncol = 1)
plot_explanations(explanation)
explanation <- explain(test_biopsy[93, ], explainer, n_labels = 1, n_features = 10)
plot_features(explanation)
View(biopsy)
